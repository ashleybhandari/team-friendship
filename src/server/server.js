import express from 'express';
import path from 'path';
import fs from 'fs';

const app = express();
const PORT = 3000;

// Middleware for parsing JSON - only necessary if you're handling JSON data in POST/PUT requests
// app.use(express.json());
app.use(express.urlencoded({ extended: true })); // This is useful only if you're handling URL-encoded data in POST/PUT requests

// Serve static files from the client directory
app.use(express.static('src/client'));

// Render the landing page view
app.get('/', (req, res) => {
    // Read the LandingView.js file
    const landingViewFilePath = path.join(__dirname, 'client', 'scripts', 'views', 'LandingView.js');
    fs.readFile(landingViewFilePath, 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading LandingView.js:', err);
            res.status(500).send('Internal Server Error');
            return;
        }

        // Execute the JavaScript code to render the landing view
        const renderedLandingView = renderLandingView(data);

        // Send the rendered landing view as HTML response
        res.send(renderedLandingView);
    });
});

// Function to render the landing view HTML from the JavaScript logic
function renderLandingView(jsCode) {
    // Create a fake window object with a document to simulate a browser environment
    const window = {};
    const document = {};
    window.document = document;

    // Execute the JavaScript code in a context with the fake window object
    eval(jsCode);

    // Return the HTML content generated by the landing view
    return document.documentElement.outerHTML;
}

// 404 Not Found Middleware (after all routes)
// It handles any requests that don't match the defined routes
app.use((req, res) => {
    res.status(404).send("Sorry, can't find that!");
});

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
